---
# tasks file for ansible-role-nginx

- block:

    - name: install dependencies
      apt:
        name: "{{ nginx_dependencies }}"
        state: present
        install_recommends: false

    - name: append key
      apt_key:
        url: "{{ nginx_key }}"
      when: nginx_key | length

    - name: append repo
      apt_repository:
        repo: "{{ nginx_repo }}"
        state: present
        update_cache: true
      when: nginx_repo | length

    - name: install pkg
      apt:
        name: "{{ nginx_pkg }}"
        state: present
        install_recommends: false
        force: "{{ nginx_pkg_force }}"

    - name: start and enable
      service:
        name: nginx
        state: started
        enabled: yes

  become: yes
  tags:
    - nginx
    - install

- block:

    - name: create config dirs
      file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: 0755
      with_items: "{{ nginx_config_dirs }}"
      tags:
        - geo
        - geos
        - map
        - maps
        - upstream
        - upstreams
        - server
        - servers
        - set_real_ip_from

    - name: find existing config files
      find:
        paths: "{{ nginx_config_dirs }}"
      register: nginx_existing_config_search
      tags:
        - cleanup

    - name: remove undefined configs
      file:
        path: "{{ item }}"
        state: absent
      with_items: "{{ nginx_undefined_configs }}"
      notify: nginx configtest and reload
      when: nginx_remove_undefined_configs
      tags:
        - cleanup

    - name: setup config
      template:
        src: nginx.conf.j2
        dest: /etc/nginx/nginx.conf
        owner: root
        group: root
        mode: 0644
      notify: nginx configtest and reload
      tags:
        - log
        - logs

    - name: setup geos
      template:
        src: "{{ item.value.template | default('geo.conf.j2') }}"
        dest: "{{ item.key | regex_replace('(.*)', nginx_geo_file_format) }}"
        owner: root
        group: root
        mode: 0644
      with_dict: "{{ nginx_geos }}"
      notify: nginx configtest and reload
      tags:
        - geo
        - geos

    - name: setup maps
      template:
        src: "{{ item.value.template | default('map.conf.j2') }}"
        dest: "{{ item.key | regex_replace('(.*)', nginx_map_file_format) }}"
        owner: root
        group: root
        mode: 0644
      with_dict: "{{ nginx_maps }}"
      notify: nginx configtest and reload
      tags:
        - map
        - maps

    - name: setup upstreams
      template:
        src: "{{ item.value.template | default('upstream.conf.j2') }}"
        dest: "{{ item.key | regex_replace('(.*)', nginx_upstream_file_format) }}"
        owner: root
        group: root
        mode: 0644
      with_dict: "{{ nginx_upstreams }}"
      notify: nginx configtest and reload
      tags:
        - upstream
        - upstreams

    - name: setup servers
      template:
        src: "{{ item.value.template | default('server.conf.j2') }}"
        dest: "{{ item.key | regex_replace('(.*)', nginx_server_file_format) }}"
        owner: root
        group: root
        mode: 0644
      with_dict: "{{ nginx_servers }}"
      notify: nginx configtest and reload
      tags:
        - server
        - servers

    - name: setup set_real_ip_from
      template:
        src: "{{ item.value.template | default('set_real_ip_from.conf.j2') }}"
        dest: "{{ item.key | regex_replace('(.*)', nginx_set_real_ip_from_file_format) }}"
        owner: root
        group: root
        mode: 0644
      with_dict: "{{ nginx_sets_real_ip_from }}"
      notify: nginx configtest and reload
      tags:
        - set_real_ip_from

    - name: setup logrotate
      template:
        src: logrotate.j2
        dest: /etc/logrotate.d/nginx
        owner: root
        group: root
        mode: 0644
        validate: 'logrotate -d %s'
      when: nginx_logrotate | length
      tags:
        - logrotate

  become: yes
  tags:
    - nginx
    - setup
